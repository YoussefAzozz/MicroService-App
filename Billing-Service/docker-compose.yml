
version: "3.9"

networks:
  backend:

volumes:
  pg_data:
  mongo_data:

services:
  postgres-db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-patientdb}
      POSTGRES_USER: ${POSTGRES_USER:-azozz}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password_azozz}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      # escape $ for in-container expansion
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h 127.0.0.1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks: [backend]

  mongo-db:
    image: mongo:7
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-azozzpass}
      # optional seed db name (used by init scripts if you add any)
      # MONGO_INITDB_DATABASE: billing
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "mongodb://localhost:27017/admin", "--eval", "db.adminCommand('ping').ok"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks: [backend]

  billing-service:
    # Node.js (Express + gRPC)
    build:
      context: ./Billing-Service          # <- path to your Node app with Dockerfile
      target: prod                        # or 'dev' if you made a dev stage with nodemon
    container_name: billing-service
    environment:
      NODE_ENV: production
      # IMPORTANT: use the service name 'mongo-db' as host inside the network
      MONGO_URI: mongodb://${MONGO_ROOT_USER:-root}:${MONGO_ROOT_PASSWORD:-azozzpass}@mongo-db:27017/billing?authSource=admin
      # if your app reads SERVER_PORT / GRPC_PORT, you can set them too:
      # SERVER_PORT: 5000
      # GRPC_PORT: 9001
    depends_on:
      mongo-db:
        condition: service_healthy
    ports:
      - "5000:5000"   # HTTP (/hello)
      - "9001:9001"   # gRPC
    healthcheck:
      # use busybox wget (present on alpine-based images) to ping /hello
      test: ["CMD-SHELL", "wget -qO- http://localhost:5000/hello || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    networks: [backend]

  patient-service:
    # Spring Boot (exposes port 4000 per your earlier calls)
    build:
      context: ./Patient-Service          # <- path to your Spring app with Dockerfile
    container_name: patient-service
    environment:
      # Spring → Postgres
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/${POSTGRES_DB:-patientdb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-azozz}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password_azozz}
      # Optional JPA tuning
      # SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Expose service on 4000 (relaxed binding for server.port)
      SERVER_PORT: 4000
      # Spring → Node gRPC
      BILLING_GRPC_HOST: billing-service
      BILLING_GRPC_PORT: 9001
    depends_on:
      postgres-db:
        condition: service_healthy
      billing-service:
        condition: service_healthy
    ports:
      - "4000:4000"
    networks: [backend]



